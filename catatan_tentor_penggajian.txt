# Catatan Lengkap Sistem Tentor & Penggajian Berbasis Persentase Tarif Les Siswa

## 1. Data & Fitur yang Dibutuhkan

### A. Data Master Tentor
- Form input data tentor: nama, kontak, keahlian, pendidikan, foto, status aktif, dsb.
- Tabel database: `tb_tentor`

### B. Data Master Siswa & Transaksi
- Sudah ada: data siswa, transaksi les, jadwal, dsb.

### C. Relasi Tentor dengan Jadwal/Transaksi
- Setiap transaksi/jadwal siswa harus ada tentor pengampu.
- Tabel relasi: `tb_trx_tentor` (atau tambahkan kolom `id_tentor` di `tb_trx` jika satu transaksi hanya satu tentor).
- Simpan juga **persentase gaji** untuk tentor pada transaksi tersebut.

### D. Data Pembayaran Siswa
- Sudah ada: field `bayar` di `tb_trx`.

### E. Data Penggajian Tentor
- Rekap gaji tentor berdasarkan persentase dari pembayaran siswa.
- Tabel rekap: `tb_gaji_tentor` (opsional, untuk riwayat pembayaran gaji tentor).

---

## 2. Alur Sistem

### A. Pendaftaran Tentor
1. Admin mengisi form data tentor (nama, kontak, keahlian, dsb).
2. Data tersimpan di tabel `tb_tentor`.

### B. Penjadwalan & Assign Tentor
1. Saat membuat jadwal/transaksi les siswa, admin memilih tentor pengampu.
2. Input juga **persentase gaji** tentor (misal: 60%).
3. Data relasi disimpan di `tb_trx_tentor` (atau di `tb_trx` jika satu tentor per transaksi).

### C. Pembayaran Siswa
1. Siswa membayar les (pembayaran dicatat di field `bayar` pada `tb_trx`).
2. Status transaksi otomatis berubah menjadi lunas jika pembayaran >= harga.

### D. Rekap & Penggajian Tentor
1. Sistem menghitung gaji tentor:
   - Gaji = Persentase × Total pembayaran siswa pada transaksi terkait.
2. Admin bisa melihat rekap gaji tentor per bulan/periode.
3. Admin melakukan pembayaran gaji ke tentor, lalu update status pembayaran gaji (opsional: simpan di `tb_gaji_tentor`).

---

## 3. Contoh Struktur Tabel

### A. tb_tentor
```
CREATE TABLE tb_tentor (
  id INT AUTO_INCREMENT PRIMARY KEY,
  nama VARCHAR(100),
  hp VARCHAR(20),
  email VARCHAR(100),
  keahlian VARCHAR(100),
  pendidikan VARCHAR(100),
  status TINYINT(1) DEFAULT 1
);
```

### B. tb_trx_tentor
```
CREATE TABLE tb_trx_tentor (
  id INT AUTO_INCREMENT PRIMARY KEY,
  id_trx INT,
  id_tentor INT,
  persentase INT,
  FOREIGN KEY (id_trx) REFERENCES tb_trx(id),
  FOREIGN KEY (id_tentor) REFERENCES tb_tentor(id)
);
```
*Atau, jika satu transaksi hanya satu tentor, tambahkan `id_tentor` dan `persentase` di `tb_trx`.*

### C. (Opsional) tb_gaji_tentor
```
CREATE TABLE tb_gaji_tentor (
  id INT AUTO_INCREMENT PRIMARY KEY,
  id_tentor INT,
  periode VARCHAR(20),
  total_gaji INT,
  status VARCHAR(20), -- Sudah dibayar/Belum
  tanggal_bayar DATE
);
```

---

## 4. Contoh Query Rekap Gaji
```
SELECT t.id_tentor, tentor.nama, SUM(trx.bayar * t.persentase / 100) AS total_gaji
FROM tb_trx_tentor t
JOIN tb_tentor tentor ON t.id_tentor = tentor.id
JOIN tb_trx trx ON t.id_trx = trx.id
WHERE trx.status = 1
GROUP BY t.id_tentor
```

---

## 5. Fitur Frontend
- **Form Data Tentor** (CRUD)
- **Assign Tentor ke Jadwal/Transaksi** (pilih tentor, input persentase)
- **Rekap Gaji Tentor** (filter, total, status pembayaran)
- **Tombol Bayar Gaji** (opsional, update status)

---

## 6. Rangkuman Alur
1. **Admin daftar tentor** → 
2. **Admin assign tentor ke jadwal/transaksi siswa** (dengan persentase) → 
3. **Siswa bayar** → 
4. **Sistem rekap otomatis gaji tentor dari pembayaran siswa** → 
5. **Admin bayar gaji tentor** (opsional update status). 